let ${Model} = require('../models').${Model},
    { transaction } = require('objection'),
    { filterer } = require('../lib/filters')
module.exports = {
    async get${Models}(query = {}, pageNumber = 0, perPage = 20) {
        return {
            ...await filterer(query, ${Model}, {
                pageNumber,
                perPage,
                related: query.related,
                orderBy: query.orderBy || 'id'
            }),
            page: pageNumber,
            per_page: perPage
        }

    },

    async get${Model}(id, query) {
        if (!id) {
            throw {
                message: 'ID Not Provided',
                statusCode: 400
            }
        }

        let the${Model} = await ${Model}.query().findById(id).eager(query.related)

        if (!the${Model}) {
            throw {
                message: '${Model} Not Found',
                statusCode: 404
            }
        }

        return the${Model}
    },

    async create${Model}(${model}Body, userPermissions = {}) {
        ${model}Body = parse(${model}Body)
        if (!${model}Body.company_id) {
            throw {
                message: 'company_id required',
                statusCode: 400
            }
        }

        const ${model} = await transaction(
            ${Model},
            async (${Model}) => {
                var new${Model} = await ${Model}.query().insert({
                    ...${model}Body
                })

                return new${Model}
            }
        )

        return ${model}

    },

    async edit${Model}(id, newBody) {
        if (!id) {
            throw {
                message: 'ID Not Provided',
                statusCode: 400
            }
        }

        newBody = parse(newBody)

        if (newBody.id) {
            delete newBody.id
        }
        let edited${Model} = await ${Model}.query().patchAndFetchById(id, { ...newBody })

        if (!edited${Model}) {
            throw {
                message: '${Model} Not Found',
                statusCode: 404
            }
        }

        return edited${Model}
    },

    async delete${Model}(id) {

        if (!id) {
            throw {
                message: 'No ID Provided',
                statusCode: 400
            }
        }

        let deletedCount = await ${Model}.query().patchAndFetchById(id, { is_deleted: true })
        await Promise.all(
            Object.keys(${Model}.getRelations()).map((relation) => {
                return deletedCount.$relatedQuery(relation).unrelate()
            })
        )

        if (deletedCount < 1) {
            throw {
                message: '${Model} Not Found',
                statusCode: 404
            }
        }

        return deletedCount

    }

}

function parse(val) {

    if (val.company_id) {
        val.company_id = parseInt(val.company_id, 10)
    }

    return val

}
